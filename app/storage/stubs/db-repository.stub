<?php namespace {{studly_vendor}}\{{studly_name}}\Repositories;
/**
 * Part of the Kyaris application.
 *
 * NOTICE OF LICENSE
 *
 * Licensed under the 3-clause BSD License.
 *
 * This source file is subject to the 3-clause BSD License that is
 * bundled with this package in the LICENSE file.  It is also available at
 * the following URL: http://www.opensource.org/licenses/BSD-3-Clause
 *
 * @package    Kyaris
 * @version    1.0.0
 * @author     Kyaris
 * @license    BSD License (3-clause)
 * @copyright  (c) 2011-2014, Kyaris LLC
 * @link       http://kyaris.com
 */

use Cartalyst\Interpret\Interpreter;
use Illuminate\Events\Dispatcher;
use Illuminate\Filesystem\Filesystem;
use {{studly_vendor}}\{{studly_name}}\Models\{{model}};
use Symfony\Component\Finder\Finder;
use Validator;

class {{class_name}} implements {{repository_interface}} {

	/**
	 * The Eloquent {{lower_name}} model.
	 *
	 * @var string
	 */
	protected $model;

	/**
	 * The event dispatcher instance.
	 *
	 * @var \Illuminate\Events\Dispatcher
	 */
	protected $dispatcher;

	/**
	 * Holds the form validation rules.
	 *
	 * @var array
	 */
	protected $rules = [

	];

	/**
	 * Constructor.
	 *
	 * @param  string  $model
	 * @param  \Illuminate\Events\Dispatcher  $dispatcher
	 * @return void
	 */
	public function __construct($model, Dispatcher $dispatcher)
	{
		$this->model = $model;

		$this->dispatcher = $dispatcher;
	}

	/**
	 * {@inheritDoc}
	 */
	public function grid()
	{
		return $this
			->createModel();
	}

	/**
	 * {@inheritDoc}
	 */
	public function findAll()
	{
		return $this
			->createModel()
			->newQuery()
			->get();
	}

	/**
	 * {@inheritDoc}
	 */
	public function find($id)
	{
		return $this
			->createModel()
			->where('id', (int) $id)
			->first();
	}

	/**
	 * {@inheritDoc}
	 */
	public function validForCreation(array $data)
	{
		return $this->validate{{model}}($data);
	}

	/**
	 * {@inheritDoc}
	 */
	public function validForUpdate($id, array $data)
	{
		return $this->validate{{model}}($data);
	}

	/**
	 * {@inheritDoc}
	 */
	public function create(array $data)
	{
		with(${{lower_model}} = $this->createModel())->fill($data)->save();

		$this->dispatcher->fire('{{lower_vendor}}.{{lower_name}}.{{lower_model}}.created', ${{lower_model}});

		return ${{lower_model}};
	}

	/**
	 * {@inheritDoc}
	 */
	public function update($id, array $data)
	{
		${{lower_model}} = $this->find($id);

		${{lower_model}}->fill($data)->save();

		$this->dispatcher->fire('{{lower_vendor}}.{{lower_name}}.{{lower_model}}.updated', ${{lower_model}});

		return ${{lower_model}};
	}

	/**
	 * {@inheritDoc}
	 */
	public function delete($id)
	{
		if (${{lower_model}} = $this->find($id))
		{
			$this->dispatcher->fire('{{lower_vendor}}.{{lower_name}}.{{lower_model}}.deleted', ${{lower_model}});

			${{lower_model}}->delete();

			return true;
		}

		return false;
	}

	/**
	 * Create a new instance of the model.
	 *
	 * @return \Illuminate\Database\Eloquent\Model
	 */
	public function createModel()
	{
		$class = '\\'.ltrim($this->model, '\\');

		return new $class;
	}

	/**
	 * Validates a {{lower_name}} entry.
	 *
	 * @param  array  $data
	 * @return \Illuminate\Support\MessageBag
	 */
	protected function validate{{model}}($data)
	{
		$validator = Validator::make($data, $this->rules);

		$validator->passes();

		return $validator->errors();
	}

}
